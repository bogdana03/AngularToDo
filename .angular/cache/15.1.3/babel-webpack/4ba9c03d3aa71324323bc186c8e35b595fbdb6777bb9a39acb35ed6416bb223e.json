{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet TodoComponent = class TodoComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.tasks = [];\n    this.inprogress = [];\n    this.done = [];\n    this.isEditEnabled = false;\n  }\n  //form to create to do items\n  ngOnInit() {\n    this.todoForm = this.fb.group({\n      item: ['', Validators.required]\n    });\n    window.localStorage.getItem(\"item\");\n  }\n  // method to add new task from the form to the lists\n  addTask() {\n    this.tasks.push({\n      description: this.todoForm.value.item,\n      done: false\n    });\n    localStorage.setItem(\"item\", JSON.stringify(this.tasks));\n    this.todoForm.reset();\n  }\n  saveTaskFromBrowser(i) {\n    window.localStorage.getItem(\"item\");\n  }\n  deleteTask(i) {\n    this.tasks.splice(i, 1);\n    localStorage.removeItem(\"item\");\n    this.todoForm.reset();\n  }\n  //method for delete items from inprogress\n  deleteInProgressTask(i) {\n    this.inprogress.splice(i, 1);\n    localStorage.removeItem(\"item\");\n  }\n  //method for delete items from done\n  deleteCopyTask(i) {\n    this.done.splice(i, 1);\n    localStorage.removeItem(\"item\");\n  }\n  onEdit(item, i) {\n    this.todoForm.controls['item'].setValue(item.description);\n    this.updateIndex = i;\n    this.isEditEnabled = true;\n  }\n  updateTask() {\n    this.tasks[this.updateIndex].description = this.todoForm.value.item;\n    this.tasks[this.updateIndex].done = false;\n    this.todoForm.reset();\n    this.updateIndex = undefined;\n    this.isEditEnabled = false;\n  }\n  //method for drop items to lists\n  drop(event) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n    }\n  }\n};\nTodoComponent = __decorate([Component({\n  selector: 'app-todo',\n  templateUrl: './todo.component.html',\n  styleUrls: ['./todo.component.css']\n})\n//created list colums\n], TodoComponent);\nexport { TodoComponent };","map":{"version":3,"mappings":"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","names":["moveItemInArray","transferArrayItem","Component","Validators","TodoComponent","constructor","fb","ngOnInit","todoForm","group","item","required","window","localStorage","getItem","addTask","tasks","push","description","value","done","setItem","JSON","stringify","reset","saveTaskFromBrowser","i","deleteTask","splice","removeItem","deleteInProgressTask","inprogress","deleteCopyTask","onEdit","controls","setValue","updateIndex","isEditEnabled","updateTask","undefined","drop","event","previousContainer","container","data","previousIndex","currentIndex","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/bogdanasorinescu/Documents/git/AngularToDo/src/app/todo/todo.component.ts"],"sourcesContent":["import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms'\nimport { ITask } from '../model/task';\n\n\n@Component({\n  selector: 'app-todo',\n  templateUrl: './todo.component.html',\n  styleUrls: ['./todo.component.css']\n})\n//created list colums\nexport class TodoComponent implements OnInit {\n  todoForm !: FormGroup;\n  tasks : ITask [] = [];\n  inprogress : ITask [] = [];\n  done : ITask [] = [];\n  updateIndex!:any;\n  isEditEnabled :boolean = false;\n  constructor(private fb : FormBuilder) {}\n   session: any;\n  //form to create to do items\n  ngOnInit(): void {\n    this.todoForm = this.fb.group({\n      item : ['', Validators.required]\n\n    })\n      window.localStorage.getItem(\"item\");\n     \n  }\n\n  // method to add new task from the form to the lists\n  addTask(){\n    this.tasks.push({\n      description:this.todoForm.value.item,\n      done:false\n      \n    })\n    \n    localStorage.setItem(\"item\", JSON.stringify(this.tasks));\n    this.todoForm.reset();\n  }\n\n  saveTaskFromBrowser(i: number){\n    window.localStorage.getItem(\"item\");\n  }\n\n  deleteTask(i: number){\n    this.tasks.splice(i,1);\n    localStorage.removeItem(\"item\");\n    this.todoForm.reset();\n  }\n\n  //method for delete items from inprogress\n  deleteInProgressTask(i: number){\n    this.inprogress.splice(i,1);\n    localStorage.removeItem(\"item\");\n  }\n\n  //method for delete items from done\n   deleteCopyTask(i: number){\n    this.done.splice(i,1)\n    localStorage.removeItem(\"item\");\n  }\n\n  onEdit(item:ITask, i : number){\n     this.todoForm.controls['item'].setValue(item.description);\n     this.updateIndex = i;\n     this.isEditEnabled = true;\n  }\n\n  updateTask(){\n    this.tasks[this.updateIndex].description = this.todoForm.value.item;\n    this.tasks[this.updateIndex].done = false;\n    this.todoForm.reset();\n    this.updateIndex = undefined;\n    this.isEditEnabled = false;\n  }\n  \n  //method for drop items to lists\n  drop(event: CdkDragDrop<ITask[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex,\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}